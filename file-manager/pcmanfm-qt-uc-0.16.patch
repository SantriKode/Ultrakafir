diff -Naur pcmanfm-qt-0.16.0/CMakeLists.txt pcmanfm-qt-0.16.0-uc/CMakeLists.txt
--- pcmanfm-qt-0.16.0/CMakeLists.txt	2020-11-02 18:27:00.000000000 -0400
+++ pcmanfm-qt-0.16.0-uc/CMakeLists.txt	2022-11-13 08:58:12.169740570 -0400
@@ -24,6 +24,7 @@
 find_package(Qt5LinguistTools ${QT_MINIMUM_VERSION} REQUIRED)
 find_package(Qt5Widgets ${QT_MINIMUM_VERSION} REQUIRED)
 find_package(Qt5X11Extras ${QT_MINIMUM_VERSION} REQUIRED)
+find_package(Qt5Network "${QT_MINIMUM_VERSION}" REQUIRED)
 find_package(fm-qt ${LIBFMQT_MINIMUM_VERSION} REQUIRED)
 find_package(lxqt-build-tools ${LXQTBT_MINIMUM_VERSION} REQUIRED)
 
diff -Naur pcmanfm-qt-0.16.0/pcmanfm/CMakeLists.txt pcmanfm-qt-0.16.0-uc/pcmanfm/CMakeLists.txt
--- pcmanfm-qt-0.16.0/pcmanfm/CMakeLists.txt	2020-11-02 18:27:00.000000000 -0400
+++ pcmanfm-qt-0.16.0-uc/pcmanfm/CMakeLists.txt	2022-11-13 08:58:12.169740570 -0400
@@ -82,6 +82,7 @@
     Qt5::X11Extras
     Qt5::Widgets
     Qt5::DBus
+    Qt5::Network
     fm-qt
 )
 
diff -Naur pcmanfm-qt-0.16.0/pcmanfm/desktopwindow.cpp pcmanfm-qt-0.16.0-uc/pcmanfm/desktopwindow.cpp
--- pcmanfm-qt-0.16.0/pcmanfm/desktopwindow.cpp	2020-11-02 18:27:00.000000000 -0400
+++ pcmanfm-qt-0.16.0-uc/pcmanfm/desktopwindow.cpp	2022-11-13 12:26:54.201950782 -0400
@@ -25,6 +25,7 @@
 #include <QFile>
 #include <QPixmap>
 #include <QPalette>
+#include <QtNetwork/QLocalSocket>
 
 #include <QLayout>
 #include <QDebug>
@@ -1422,13 +1423,55 @@
 
 // slots for file operations
 
+void sendRawOrderList(const QStringList & order, QLocalSocket &socket, int idNextOrder)
+{
+    QByteArray block;
+    QDataStream out(&block, QIODevice::WriteOnly);
+    out.setVersion(QDataStream::Qt_4_4);
+    out << int(0);
+    out << idNextOrder;
+    out << order;
+    out.device()->seek(0);
+    out << block.size();
+    do //cut string list and send it as block of 32KB
+    {
+        QByteArray blockToSend;
+        int byteWriten;
+        blockToSend=block.left(32*1024);//32KB
+        block.remove(0,blockToSend.size());
+        byteWriten = socket.write(blockToSend);
+    }
+    while(block.size());
+}
+
 void DesktopWindow::onCutActivated() {
     if(desktopHideItems_) {
         return;
     }
     auto paths = selectedFilePaths();
     if(!paths.empty()) {
-        Fm::cutFilesToClipboard(paths);
+        QClipboard* clipboard = QApplication::clipboard();
+        const QMimeData* data = clipboard->mimeData();
+        QLocalSocket socket;
+        socket.connectToServer(QString::fromStdString("advanced-copier-"+std::to_string(getuid())));
+        socket.waitForConnected();
+        if(socket.state()==QLocalSocket::ConnectedState)
+        {
+            sendRawOrderList(QStringList() << QString::fromLatin1("protocol") << QString::fromLatin1("0002"), socket, 1);
+            socket.waitForReadyRead();
+            socket.readAll();
+            QStringList l;
+            l << QString::fromLatin1("mv");
+            clipboard->clear(QClipboard::Clipboard);
+            for(const Fm::FilePath &n : paths)
+                l << QString::fromLatin1(n.toString().get());
+            l << QString::fromLatin1(path().toString().get());
+            sendRawOrderList(l, socket, 2);
+            socket.waitForBytesWritten();
+            socket.close();
+        }
+        else
+            Fm::cutFilesToClipboard(paths);
     }
 }
 
@@ -1438,7 +1481,27 @@
     }
     auto paths = selectedFilePaths();
     if(!paths.empty()) {
-        Fm::copyFilesToClipboard(paths);
+        QClipboard* clipboard = QApplication::clipboard();
+        const QMimeData* data = clipboard->mimeData();
+        QLocalSocket socket;
+        socket.connectToServer(QString::fromStdString("advanced-copier-"+std::to_string(getuid())));
+        socket.waitForConnected();
+        if(socket.state()==QLocalSocket::ConnectedState)
+        {
+            sendRawOrderList(QStringList() << QString::fromLatin1("protocol") << QString::fromLatin1("0002"), socket, 1);
+            socket.waitForReadyRead();
+            socket.readAll();
+            QStringList l;
+            l << QString::fromLatin1("cp");
+            for(const Fm::FilePath &n : paths)
+                l << QString::fromLatin1(n.toString().get());
+            l << QString::fromLatin1(path().toString().get());
+            sendRawOrderList(l, socket, 2);
+            socket.waitForBytesWritten();
+            socket.close();
+        }
+        else
+            Fm::copyFilesToClipboard(paths);
     }
 }
 
diff -Naur pcmanfm-qt-0.16.0/pcmanfm/mainwindow.cpp pcmanfm-qt-0.16.0-uc/pcmanfm/mainwindow.cpp
--- pcmanfm-qt-0.16.0/pcmanfm/mainwindow.cpp	2020-11-02 18:27:00.000000000 -0400
+++ pcmanfm-qt-0.16.0-uc/pcmanfm/mainwindow.cpp	2022-11-13 12:13:32.235583274 -0400
@@ -34,6 +34,7 @@
 #include <QStandardPaths>
 #include <QClipboard>
 #include <QDebug>
+#include <QtNetwork/QLocalSocket>
 
 #include "tabpage.h"
 #include "launcher.h"
@@ -1633,16 +1634,86 @@
     }
 }
 
+void sendRawOrderListA(const QStringList & order, QLocalSocket &socket, int idNextOrder)
+{
+    QByteArray block;
+    QDataStream out(&block, QIODevice::WriteOnly);
+    out.setVersion(QDataStream::Qt_4_4);
+    out << int(0);
+    out << idNextOrder;
+    out << order;
+    out.device()->seek(0);
+    out << block.size();
+    do //cut string list and send it as block of 32KB
+    {
+        QByteArray blockToSend;
+        int byteWriten;
+        blockToSend=block.left(32*1024);//32KB
+        block.remove(0,blockToSend.size());
+        byteWriten = socket.write(blockToSend);
+    }
+    while(block.size());
+}
+
 void MainWindow::on_actionCopy_triggered() {
+    QClipboard* clipboard = QApplication::clipboard();
+    const QMimeData* data = clipboard->mimeData();
+
     TabPage* page = currentPage();
     auto paths = page->selectedFilePaths();
-    copyFilesToClipboard(paths);
+
+    if(!paths.empty()) {
+        QLocalSocket socket;
+        socket.connectToServer(QString::fromStdString("advanced-copier-"+std::to_string(getuid())));
+        socket.waitForConnected();
+        if(socket.state()==QLocalSocket::ConnectedState)
+        {
+            sendRawOrderListA(QStringList() << QString::fromLatin1("protocol") << QString::fromLatin1("0002"), socket, 1);
+            socket.waitForReadyRead();
+            socket.readAll();
+            QStringList l;
+            l << QString::fromLatin1("cp");
+            for(const Fm::FilePath &n : paths)
+                l << QString::fromLatin1(n.toString().get());
+            l << QString::fromLatin1(currentPage()->path().toString().get());
+            sendRawOrderListA(l, socket, 2);
+            socket.waitForBytesWritten();
+            socket.close();
+        }
+        else
+            copyFilesToClipboard(paths);
+    }
 }
 
 void MainWindow::on_actionCut_triggered() {
+    QClipboard* clipboard = QApplication::clipboard();
+    const QMimeData* data = clipboard->mimeData();
+
     TabPage* page = currentPage();
     auto paths = page->selectedFilePaths();
-    cutFilesToClipboard(paths);
+
+    if(!paths.empty()) {
+        QLocalSocket socket;
+        socket.connectToServer(QString::fromStdString("advanced-copier-"+std::to_string(getuid())));
+        socket.waitForConnected();
+        if(socket.state()==QLocalSocket::ConnectedState)
+        {
+            sendRawOrderListA(QStringList() << QString::fromLatin1("protocol") << QString::fromLatin1("0002"), socket, 1);
+            socket.waitForReadyRead();
+            socket.readAll();
+            QStringList l;
+            l << QString::fromLatin1("mv");
+            clipboard->clear(QClipboard::Clipboard);
+            for(const Fm::FilePath &n : paths)
+                l << QString::fromLatin1(n.toString().get());
+            l << QString::fromLatin1(currentPage()->path().toString().get());
+            sendRawOrderListA(l, socket, 2);
+            socket.waitForBytesWritten();
+            socket.close();
+        }
+        else
+            cutFilesToClipboard(paths);
+    }
 }
 
 void MainWindow::on_actionPaste_triggered() {
